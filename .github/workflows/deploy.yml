name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      reason:
        description: Optional note for this run
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Debug event context
        run: |
          echo "Actor: $GITHUB_ACTOR"
          echo "Repo: $GITHUB_REPOSITORY"
          echo "Ref: $GITHUB_REF"
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Reason: ${{ inputs.reason }}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install Wrangler
        run: npm i -g wrangler@4

      - name: Show Wrangler version
        run: wrangler --version

      - name: Validate mandatory secrets
        run: |
          missing=0
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then echo "::error::Missing secret CLOUDFLARE_API_TOKEN"; missing=1; fi
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then echo "::error::Missing secret CLOUDFLARE_ACCOUNT_ID"; missing=1; fi
          if [ $missing -eq 1 ]; then echo "Required secrets are missing. Configure them in Repository Settings → Secrets and variables → Actions."; exit 1; fi

      - name: Auto-provision KV/R2 resources
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e
          
          # 设置默认的 bucket 名称
          CF_R2_BUCKET="filecodebox-storage"
          CF_R2_PREVIEW_BUCKET="filecodebox-storage-preview"

          echo "🔧 开始自动配置 Cloudflare 资源..."
          echo "Account ID: $CLOUDFLARE_ACCOUNT_ID"

          # 创建或检测 R2 存储桶
          echo "📦 检查 R2 存储桶..."
          if ! wrangler r2 bucket list 2>/dev/null | grep -q "^$CF_R2_BUCKET"; then
            echo "创建 R2 存储桶: $CF_R2_BUCKET"
            wrangler r2 bucket create "$CF_R2_BUCKET"
          else
            echo "✅ R2 存储桶已存在: $CF_R2_BUCKET"
          fi

          if ! wrangler r2 bucket list 2>/dev/null | grep -q "^$CF_R2_PREVIEW_BUCKET"; then
            echo "创建 R2 预览存储桶: $CF_R2_PREVIEW_BUCKET"
            wrangler r2 bucket create "$CF_R2_PREVIEW_BUCKET"
          else
            echo "✅ R2 预览存储桶已存在: $CF_R2_PREVIEW_BUCKET"
          fi

          # 创建 KV 命名空间
          echo "🗄️  检查 KV 命名空间..."
          
          # 获取 KV namespace 列表并提取 ID
          KV_LIST=$(wrangler kv namespace list 2>/dev/null || echo "")
          
          # 查找非预览的 FILECODEBOX_KV
          CF_KV_ID=$(echo "$KV_LIST" | grep "FILECODEBOX_KV" | grep -v "preview" | grep -oP '(?<=id = ")[^"]+' | head -1 || echo "")
          
          if [ -z "$CF_KV_ID" ]; then
            echo "创建 KV namespace: FILECODEBOX_KV"
            KV_OUTPUT=$(wrangler kv namespace create FILECODEBOX_KV 2>&1)
            echo "$KV_OUTPUT"
            CF_KV_ID=$(echo "$KV_OUTPUT" | grep -oP '(?<=id = ")[^"]+' | head -1)
            
            if [ -z "$CF_KV_ID" ]; then
              # 尝试另一种提取方式
              CF_KV_ID=$(echo "$KV_OUTPUT" | grep -oP '[a-f0-9]{32}' | head -1)
            fi
            
            echo "✅ 已创建 KV namespace: $CF_KV_ID"
          else
            echo "✅ 找到已存在的 KV namespace: $CF_KV_ID"
          fi

          # 创建预览 KV namespace
          CF_KV_PREVIEW_ID=$(echo "$KV_LIST" | grep "FILECODEBOX_KV" | grep "preview" | grep -oP '(?<=id = ")[^"]+' | head -1 || echo "")
          
          if [ -z "$CF_KV_PREVIEW_ID" ]; then
            echo "创建预览 KV namespace: FILECODEBOX_KV (preview)"
            KV_PREVIEW_OUTPUT=$(wrangler kv namespace create FILECODEBOX_KV --preview 2>&1)
            echo "$KV_PREVIEW_OUTPUT"
            CF_KV_PREVIEW_ID=$(echo "$KV_PREVIEW_OUTPUT" | grep -oP '(?<=id = ")[^"]+' | head -1)
            
            if [ -z "$CF_KV_PREVIEW_ID" ]; then
              # 尝试另一种提取方式
              CF_KV_PREVIEW_ID=$(echo "$KV_PREVIEW_OUTPUT" | grep -oP '[a-f0-9]{32}' | head -1)
            fi
            
            echo "✅ 已创建预览 KV namespace: $CF_KV_PREVIEW_ID"
          else
            echo "✅ 找到已存在的预览 KV namespace: $CF_KV_PREVIEW_ID"
          fi

          # 验证所有 ID 都已获取
          if [ -z "$CF_KV_ID" ] || [ -z "$CF_KV_PREVIEW_ID" ]; then
            echo "❌ 错误: 无法获取 KV namespace ID"
            echo "KV_ID=$CF_KV_ID"
            echo "KV_PREVIEW_ID=$CF_KV_PREVIEW_ID"
            echo ""
            echo "尝试重新列出所有 KV namespaces..."
            wrangler kv namespace list
            exit 1
          fi

          echo ""
          echo "📋 资源配置完成:"
          echo "  KV ID: $CF_KV_ID"
          echo "  KV Preview ID: $CF_KV_PREVIEW_ID"
          echo "  R2 Bucket: $CF_R2_BUCKET"
          echo "  R2 Preview Bucket: $CF_R2_PREVIEW_BUCKET"

          # 导出环境变量供后续步骤使用
          echo "CF_KV_ID=$CF_KV_ID" >> $GITHUB_ENV
          echo "CF_KV_PREVIEW_ID=$CF_KV_PREVIEW_ID" >> $GITHUB_ENV
          echo "CF_R2_BUCKET=$CF_R2_BUCKET" >> $GITHUB_ENV
          echo "CF_R2_PREVIEW_BUCKET=$CF_R2_PREVIEW_BUCKET" >> $GITHUB_ENV

      - name: 生成配置文件并替换占位符
        env:
          CF_KV_ID: ${{ env.CF_KV_ID }}
          CF_KV_PREVIEW_ID: ${{ env.CF_KV_PREVIEW_ID }}
          CF_R2_BUCKET: ${{ env.CF_R2_BUCKET }}
          CF_R2_PREVIEW_BUCKET: ${{ env.CF_R2_PREVIEW_BUCKET }}
        run: |
          set -e
          
          echo "🔄 正在生成部署配置..."
          
          # 复制原始配置
          cp wrangler.toml wrangler.gen.toml
          
          # 验证必需的环境变量
          if [ -z "$CF_KV_ID" ]; then
            echo "❌ 错误: CF_KV_ID 未设置"
            exit 1
          fi
          if [ -z "$CF_KV_PREVIEW_ID" ]; then
            echo "❌ 错误: CF_KV_PREVIEW_ID 未设置"
            exit 1
          fi
          if [ -z "$CF_R2_BUCKET" ]; then
            echo "❌ 错误: CF_R2_BUCKET 未设置"
            exit 1
          fi
          if [ -z "$CF_R2_PREVIEW_BUCKET" ]; then
            echo "❌ 错误: CF_R2_PREVIEW_BUCKET 未设置"
            exit 1
          fi

          # 替换占位符
          sed -i "s/REPLACE_WITH_YOUR_KV_ID/$CF_KV_ID/g" wrangler.gen.toml
          sed -i "s/REPLACE_WITH_YOUR_KV_PREVIEW_ID/$CF_KV_PREVIEW_ID/g" wrangler.gen.toml
          sed -i "s/REPLACE_WITH_YOUR_R2_BUCKET/$CF_R2_BUCKET/g" wrangler.gen.toml
          sed -i "s/REPLACE_WITH_YOUR_R2_PREVIEW_BUCKET/$CF_R2_PREVIEW_BUCKET/g" wrangler.gen.toml

          echo ""
          echo "📄 配置文件对比:"
          diff -u wrangler.toml wrangler.gen.toml || true
          
          echo ""
          echo "✅ 配置文件生成完成"

      - name: 设置永久密码（默认 123456）
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PERMANENT_PASSWORD: ${{ secrets.PERMANENT_PASSWORD }}
        run: |
          # 如果用户设置了 PERMANENT_PASSWORD secret，使用用户的密码
          # 否则使用默认密码 123456
          if [ -n "$PERMANENT_PASSWORD" ]; then
            echo "🔐 使用自定义永久密码"
            echo -n "$PERMANENT_PASSWORD" | wrangler secret put PERMANENT_PASSWORD --config wrangler.gen.toml
          else
            echo "🔐 使用默认永久密码: 123456"
            echo -n "123456" | wrangler secret put PERMANENT_PASSWORD --config wrangler.gen.toml
          fi
          echo "✅ 永久密码已设置"

      - name: 部署到 Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "🚀 开始部署到 Cloudflare Workers..."
          
          if [ -f wrangler.gen.toml ]; then
            wrangler deploy --config wrangler.gen.toml
          else
            echo "❌ 错误: wrangler.gen.toml 不存在"
            exit 1
          fi
          
          echo ""
          echo "✅ 部署成功！"
          echo "📦 您的文件快递柜已部署到 Cloudflare Workers"
          echo "🔑 永久保存功能密码: 123456 (可通过 PERMANENT_PASSWORD secret 自定义)"
